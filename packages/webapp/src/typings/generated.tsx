// DO NOT EDIT!!! This file is generated by graphql-code-generator.
import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  JSON: JSON;
  JSONObject: any;
  URL: URL;
  Upload: any;
};

export type Appearance = {
  eyeColor?: Maybe<Scalars['String']>;
  gender?: Maybe<Gender>;
  hairColor?: Maybe<Scalars['String']>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  race?: Maybe<Scalars['String']>;
  weight?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type AvatarAndStatsInput = {
  image: Scalars['Upload'];
  powerStats: PowerStatsInput;
};

export type Biography = {
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  alignment?: Maybe<Scalars['String']>;
  alterEgos?: Maybe<Scalars['String']>;
  firstAppearance?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  placeOfBirth?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
};

export type Connections = {
  groupAffiliation?: Maybe<Scalars['String']>;
  relatives?: Maybe<Scalars['String']>;
};

export enum Gender {
  Female = 'Female',
  Male = 'Male',
  Unknown = 'Unknown'
}

export type Image = {
  url: Scalars['String'];
};

export type Mutation = {
  updateAvatarAndStats: SuperHeroTruncated;
  updatePowerStats: SuperHeroTruncated;
};


export type MutationUpdateAvatarAndStatsArgs = {
  payload: AvatarAndStatsInput;
  superheroId: Scalars['Int'];
};


export type MutationUpdatePowerStatsArgs = {
  payload: PowerStatsInput;
  superheroId: Scalars['Int'];
};

export type PowerStats = {
  combat?: Maybe<Scalars['Int']>;
  durability?: Maybe<Scalars['Int']>;
  intelligence?: Maybe<Scalars['Int']>;
  power?: Maybe<Scalars['Int']>;
  speed?: Maybe<Scalars['Int']>;
  strength?: Maybe<Scalars['Int']>;
};

export type PowerStatsInput = {
  combat?: InputMaybe<Scalars['Int']>;
  durability?: InputMaybe<Scalars['Int']>;
  intelligence?: InputMaybe<Scalars['Int']>;
  power?: InputMaybe<Scalars['Int']>;
  speed?: InputMaybe<Scalars['Int']>;
  strength?: InputMaybe<Scalars['Int']>;
};

export type Query = {
  searchSuperHero?: Maybe<Array<SuperHero>>;
  viewSuperHeroDetails: SuperHero;
};


export type QuerySearchSuperHeroArgs = {
  name: Scalars['String'];
};


export type QueryViewSuperHeroDetailsArgs = {
  superheroId: Scalars['Int'];
};

export type SuperHero = {
  appearance?: Maybe<Appearance>;
  biography?: Maybe<Biography>;
  connections?: Maybe<Connections>;
  id: Scalars['Int'];
  image: Image;
  name: Scalars['String'];
  powerstats?: Maybe<PowerStats>;
  work?: Maybe<Work>;
};

export type SuperHeroSearch = {
  results?: Maybe<Array<Maybe<SuperHero>>>;
};

export type SuperHeroTruncated = {
  id: Scalars['Int'];
  image?: Maybe<Image>;
  name: Scalars['String'];
  powerstats?: Maybe<PowerStats>;
};

export type Work = {
  base?: Maybe<Scalars['String']>;
  occupation?: Maybe<Scalars['String']>;
};

export type SearchSuperHeroQueryVariables = Exact<{
  name: Scalars['String'];
}>;


export type SearchSuperHeroQuery = { searchSuperHero?: Array<{ id: number, name: string, powerstats?: { intelligence?: number | null, strength?: number | null, speed?: number | null, durability?: number | null, power?: number | null, combat?: number | null } | null, image: { url: string } }> | null };

export type ViewSuperHeroDetailsQueryVariables = Exact<{
  superheroId: Scalars['Int'];
}>;


export type ViewSuperHeroDetailsQuery = { viewSuperHeroDetails: { id: number, name: string, powerstats?: { intelligence?: number | null, strength?: number | null, speed?: number | null, durability?: number | null, power?: number | null, combat?: number | null } | null, image: { url: string } } };

export type UpdatePowerStatsMutationVariables = Exact<{
  superheroId: Scalars['Int'];
  payload: PowerStatsInput;
}>;


export type UpdatePowerStatsMutation = { updatePowerStats: { id: number, name: string, powerstats?: { intelligence?: number | null, strength?: number | null, speed?: number | null, durability?: number | null, power?: number | null, combat?: number | null } | null } };

export type UpdateAvatarAndStatsMutationVariables = Exact<{
  superheroId: Scalars['Int'];
  payload: AvatarAndStatsInput;
}>;


export type UpdateAvatarAndStatsMutation = { updateAvatarAndStats: { id: number, name: string, powerstats?: { intelligence?: number | null, strength?: number | null, speed?: number | null, durability?: number | null, power?: number | null, combat?: number | null } | null, image?: { url: string } | null } };


export const SearchSuperHeroDocument = gql`
    query searchSuperHero($name: String!) {
  searchSuperHero(name: $name) {
    id
    name
    powerstats {
      intelligence
      strength
      speed
      durability
      power
      combat
    }
    image {
      url
    }
  }
}
    `;

export function useSearchSuperHeroQuery(options: Omit<Urql.UseQueryArgs<SearchSuperHeroQueryVariables>, 'query'>) {
  return Urql.useQuery<SearchSuperHeroQuery, SearchSuperHeroQueryVariables>({ query: SearchSuperHeroDocument, ...options });
};
export const ViewSuperHeroDetailsDocument = gql`
    query viewSuperHeroDetails($superheroId: Int!) {
  viewSuperHeroDetails(superheroId: $superheroId) {
    id
    name
    powerstats {
      intelligence
      strength
      speed
      durability
      power
      combat
    }
    image {
      url
    }
  }
}
    `;

export function useViewSuperHeroDetailsQuery(options: Omit<Urql.UseQueryArgs<ViewSuperHeroDetailsQueryVariables>, 'query'>) {
  return Urql.useQuery<ViewSuperHeroDetailsQuery, ViewSuperHeroDetailsQueryVariables>({ query: ViewSuperHeroDetailsDocument, ...options });
};
export const UpdatePowerStatsDocument = gql`
    mutation updatePowerStats($superheroId: Int!, $payload: PowerStatsInput!) {
  updatePowerStats(superheroId: $superheroId, payload: $payload) {
    id
    name
    powerstats {
      intelligence
      strength
      speed
      durability
      power
      combat
    }
  }
}
    `;

export function useUpdatePowerStatsMutation() {
  return Urql.useMutation<UpdatePowerStatsMutation, UpdatePowerStatsMutationVariables>(UpdatePowerStatsDocument);
};
export const UpdateAvatarAndStatsDocument = gql`
    mutation updateAvatarAndStats($superheroId: Int!, $payload: AvatarAndStatsInput!) {
  updateAvatarAndStats(superheroId: $superheroId, payload: $payload) {
    id
    name
    powerstats {
      intelligence
      strength
      speed
      durability
      power
      combat
    }
    image {
      url
    }
  }
}
    `;

export function useUpdateAvatarAndStatsMutation() {
  return Urql.useMutation<UpdateAvatarAndStatsMutation, UpdateAvatarAndStatsMutationVariables>(UpdateAvatarAndStatsDocument);
};