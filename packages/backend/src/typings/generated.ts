// DO NOT EDIT!!! This file is generated by graphql-code-generator.
import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  JSON: JSON;
  JSONObject: any;
  URL: URL;
  Upload: any;
};

export type Appearance = {
  eyeColor?: Maybe<Scalars['String']>;
  gender?: Maybe<Gender>;
  hairColor?: Maybe<Scalars['String']>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  race?: Maybe<Scalars['String']>;
  weight?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type AvatarAndStatsInput = {
  image: Scalars['Upload'];
  powerStats: PowerStatsInput;
};

export type Biography = {
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  alignment?: Maybe<Scalars['String']>;
  alterEgos?: Maybe<Scalars['String']>;
  firstAppearance?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  placeOfBirth?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
};

export type Connections = {
  groupAffiliation?: Maybe<Scalars['String']>;
  relatives?: Maybe<Scalars['String']>;
};

export enum Gender {
  Female = 'Female',
  Male = 'Male',
  Unknown = 'Unknown'
}

export type Image = {
  url: Scalars['String'];
};

export type Mutation = {
  updateAvatarAndStats: SuperHeroTruncated;
  updatePowerStats: SuperHeroTruncated;
};


export type MutationUpdateAvatarAndStatsArgs = {
  id: Scalars['Int'];
  payload: AvatarAndStatsInput;
};


export type MutationUpdatePowerStatsArgs = {
  id: Scalars['Int'];
  payload: PowerStatsInput;
};

export type PowerStats = {
  combat?: Maybe<Scalars['Int']>;
  durability?: Maybe<Scalars['Int']>;
  intelligence?: Maybe<Scalars['Int']>;
  power?: Maybe<Scalars['Int']>;
  speed?: Maybe<Scalars['Int']>;
  strength?: Maybe<Scalars['Int']>;
};

export type PowerStatsInput = {
  combat?: InputMaybe<Scalars['Int']>;
  durability?: InputMaybe<Scalars['Int']>;
  intelligence?: InputMaybe<Scalars['Int']>;
  power?: InputMaybe<Scalars['Int']>;
  speed?: InputMaybe<Scalars['Int']>;
  strength?: InputMaybe<Scalars['Int']>;
};

export type Query = {
  searchSuperHero?: Maybe<Array<SuperHero>>;
  viewSuperHeroDetails: SuperHero;
};


export type QuerySearchSuperHeroArgs = {
  name: Scalars['String'];
};


export type QueryViewSuperHeroDetailsArgs = {
  id: Scalars['Int'];
};

export type SuperHero = {
  appearance?: Maybe<Appearance>;
  biography?: Maybe<Biography>;
  connections?: Maybe<Connections>;
  id: Scalars['Int'];
  image: Image;
  name: Scalars['String'];
  powerstats?: Maybe<PowerStats>;
  work?: Maybe<Work>;
};

export type SuperHeroSearch = {
  results?: Maybe<Array<Maybe<SuperHero>>>;
};

export type SuperHeroTruncated = {
  id: Scalars['Int'];
  image?: Maybe<Image>;
  name: Scalars['String'];
  powerstats?: Maybe<PowerStats>;
};

export type Work = {
  base?: Maybe<Scalars['String']>;
  occupation?: Maybe<Scalars['String']>;
};

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info?: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info?: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  Appearance: ResolverTypeWrapper<Appearance>;
  AvatarAndStatsInput: AvatarAndStatsInput;
  Biography: ResolverTypeWrapper<Biography>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  Connections: ResolverTypeWrapper<Connections>;
  Gender: Gender;
  Image: ResolverTypeWrapper<Image>;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  JSON: ResolverTypeWrapper<Scalars['JSON']>;
  JSONObject: ResolverTypeWrapper<Scalars['JSONObject']>;
  Mutation: ResolverTypeWrapper<{}>;
  PowerStats: ResolverTypeWrapper<PowerStats>;
  PowerStatsInput: PowerStatsInput;
  Query: ResolverTypeWrapper<{}>;
  String: ResolverTypeWrapper<Scalars['String']>;
  SuperHero: ResolverTypeWrapper<SuperHero>;
  SuperHeroSearch: ResolverTypeWrapper<SuperHeroSearch>;
  SuperHeroTruncated: ResolverTypeWrapper<SuperHeroTruncated>;
  URL: ResolverTypeWrapper<Scalars['URL']>;
  Upload: ResolverTypeWrapper<Scalars['Upload']>;
  Work: ResolverTypeWrapper<Work>;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  Appearance: Appearance;
  AvatarAndStatsInput: AvatarAndStatsInput;
  Biography: Biography;
  Boolean: Scalars['Boolean'];
  Connections: Connections;
  Image: Image;
  Int: Scalars['Int'];
  JSON: Scalars['JSON'];
  JSONObject: Scalars['JSONObject'];
  Mutation: {};
  PowerStats: PowerStats;
  PowerStatsInput: PowerStatsInput;
  Query: {};
  String: Scalars['String'];
  SuperHero: SuperHero;
  SuperHeroSearch: SuperHeroSearch;
  SuperHeroTruncated: SuperHeroTruncated;
  URL: Scalars['URL'];
  Upload: Scalars['Upload'];
  Work: Work;
}>;

export type AppearanceResolvers<ContextType = any, ParentType extends ResolversParentTypes['Appearance'] = ResolversParentTypes['Appearance']> = ResolversObject<{
  eyeColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['Gender']>, ParentType, ContextType>;
  hairColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  height?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  race?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  weight?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BiographyResolvers<ContextType = any, ParentType extends ResolversParentTypes['Biography'] = ResolversParentTypes['Biography']> = ResolversObject<{
  aliases?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  alignment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  alterEgos?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstAppearance?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  placeOfBirth?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  publisher?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConnectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Connections'] = ResolversParentTypes['Connections']> = ResolversObject<{
  groupAffiliation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  relatives?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ImageResolvers<ContextType = any, ParentType extends ResolversParentTypes['Image'] = ResolversParentTypes['Image']> = ResolversObject<{
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface JsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JSON'], any> {
  name: 'JSON';
}

export interface JsonObjectScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JSONObject'], any> {
  name: 'JSONObject';
}

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = ResolversObject<{
  updateAvatarAndStats?: Resolver<ResolversTypes['SuperHeroTruncated'], ParentType, ContextType, RequireFields<MutationUpdateAvatarAndStatsArgs, 'id' | 'payload'>>;
  updatePowerStats?: Resolver<ResolversTypes['SuperHeroTruncated'], ParentType, ContextType, RequireFields<MutationUpdatePowerStatsArgs, 'id' | 'payload'>>;
}>;

export type PowerStatsResolvers<ContextType = any, ParentType extends ResolversParentTypes['PowerStats'] = ResolversParentTypes['PowerStats']> = ResolversObject<{
  combat?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  durability?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  intelligence?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  power?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  speed?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  strength?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
  searchSuperHero?: Resolver<Maybe<Array<ResolversTypes['SuperHero']>>, ParentType, ContextType, RequireFields<QuerySearchSuperHeroArgs, 'name'>>;
  viewSuperHeroDetails?: Resolver<ResolversTypes['SuperHero'], ParentType, ContextType, RequireFields<QueryViewSuperHeroDetailsArgs, 'id'>>;
}>;

export type SuperHeroResolvers<ContextType = any, ParentType extends ResolversParentTypes['SuperHero'] = ResolversParentTypes['SuperHero']> = ResolversObject<{
  appearance?: Resolver<Maybe<ResolversTypes['Appearance']>, ParentType, ContextType>;
  biography?: Resolver<Maybe<ResolversTypes['Biography']>, ParentType, ContextType>;
  connections?: Resolver<Maybe<ResolversTypes['Connections']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  image?: Resolver<ResolversTypes['Image'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  powerstats?: Resolver<Maybe<ResolversTypes['PowerStats']>, ParentType, ContextType>;
  work?: Resolver<Maybe<ResolversTypes['Work']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SuperHeroSearchResolvers<ContextType = any, ParentType extends ResolversParentTypes['SuperHeroSearch'] = ResolversParentTypes['SuperHeroSearch']> = ResolversObject<{
  results?: Resolver<Maybe<Array<Maybe<ResolversTypes['SuperHero']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SuperHeroTruncatedResolvers<ContextType = any, ParentType extends ResolversParentTypes['SuperHeroTruncated'] = ResolversParentTypes['SuperHeroTruncated']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  powerstats?: Resolver<Maybe<ResolversTypes['PowerStats']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface UrlScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['URL'], any> {
  name: 'URL';
}

export interface UploadScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Upload'], any> {
  name: 'Upload';
}

export type WorkResolvers<ContextType = any, ParentType extends ResolversParentTypes['Work'] = ResolversParentTypes['Work']> = ResolversObject<{
  base?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  occupation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Resolvers<ContextType = any> = ResolversObject<{
  Appearance?: AppearanceResolvers<ContextType>;
  Biography?: BiographyResolvers<ContextType>;
  Connections?: ConnectionsResolvers<ContextType>;
  Image?: ImageResolvers<ContextType>;
  JSON?: GraphQLScalarType;
  JSONObject?: GraphQLScalarType;
  Mutation?: MutationResolvers<ContextType>;
  PowerStats?: PowerStatsResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  SuperHero?: SuperHeroResolvers<ContextType>;
  SuperHeroSearch?: SuperHeroSearchResolvers<ContextType>;
  SuperHeroTruncated?: SuperHeroTruncatedResolvers<ContextType>;
  URL?: GraphQLScalarType;
  Upload?: GraphQLScalarType;
  Work?: WorkResolvers<ContextType>;
}>;

